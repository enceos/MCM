PART
{
// this is a sample config file, for determining a good file format for defining part parameters
// comment line - ignored by cfg parser
// empty lines, or lines without a '=' sign are also ignored
// all other lines are split at the '=' sign, and the left operand is used to know what parameter we are setting
// diferent parameters require data in different formats (see docs), and each module has it's own parameters (again, see docs)
// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)
// each keyword here relates to an existing variable in the assigned module. If the keyword isn't found, it is ignored.
// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it's default value
// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it's value can be parsed)


// --- general parameters ---
name = WBI_IMW
module = Part
author = Michael Billard (Angel-125)

// --- asset parameters ---
rescaleFactor = 1

MODEL
{
    model = WildBlueIndustries/MCM/MultiModule/IMW
}


// --- node definitions ---
// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
node_attach = 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1

// --- editor parameters ---
TechRequired = specializedConstruction
entryCost = 4000
cost = 500
category = Utility
subcategory = 0
title = Inflatable Multipurpose Warehouse
manufacturer = Wild Blue Industries
description = Need a lot of storage space? Then the Inflatable Multipurpose Warehouse (IMW) is for you! The IMW gives your base ample room to store your stuff, and you can reconfigure the warehouse in the field by simply emptying the contents and choosing another storage configuration.

// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,1,0,0,0

// --- standard part parameters ---
mass = 0.25
dragModelType = default
maximum_drag = 0.25
minimum_drag = 0.25
angularDrag = .5
crashTolerance = 45
breakingForce = 280
breakingTorque = 280
maxTemp = 3400
CrewCapacity = 0
vesselType = Base
fuelCrossFeed = True

MODULE
{
    name = FSanimateGeneric
    animationName = IMWLights
    startEventGUIName = Lights On
    endEventGUIName = Lights Off
    toggleActionName = Toggle Lights
    availableInEVA = True
    availableInVessel = True
    EVArange = 5
    layer = 0
    moduleID = 1
    playAnimationOnEditorSpawn = False
}

MODULE
{
    name = ProxyLogistics
    LogisticsRange = 2000
    IsLogisticsDistributor = True
}

MODULE
{
    name = MKSStorageController
    enableLogging = True

    //Determines whether or not the part is inflatable
    isInflatable = True

    //Name of inflatable animation
    animationName = Deploy

    //GUI name of deploy animation
    startEventGUIName = Inflate

    //GUI name of retract animation
    endEventGUIName = Deflate

    //Determines if the module allows in-field reconfiguring
    fieldReconfigurable = True

    //Determines whether or not to show the context menu GUI
    //So objects derived from MKSStorageContainer can show their own GUI
    showGUI = True

    //Short name of the default module template.
    //This is used when selecting the part in the editor.
    //User will then right-click on the module to change its type.
    defaultTemplate = Basic MBU

    //name of the template nodes to use
    templateNodes = MKSSTORAGE

    //List of all the resources that may be replaced during a template switch. Any resource NOT
    //on the list will be preserved.
    //If empty, then all of the part's resources will be cleared during a template switch.
    //Set to ALL if you want all of the part's resources to be cleared during a template switch.
    //This exists because mods like TAC-LS like to add resources to parts and we won't know about them at runtime.
    resourcesToReplace = ALL

    //Some containers don't hold as much resources as the template specifies, while others hold more.
    //Since the resource templates specify base amounts, the capacity factor specifies a multiplier to
    //factor into the resource amounts.
    capacityFactor = 4.0

    //Base path where all the decals are located
    decalBasePath = WildBlueIndustries/MCM/Decals

    //Name of the logo panel transforms
    logoPanelTransform = logoPanel001, logoPanel002, logoPanel003, logoPanel004

    //The DECAL config node is used to determine the names of the logo panels and glow panels.
    //MKSStorageController uses the short name, which is also used in the template file, to determine what decals to use where.
    //Since different models and parts can use different decals, we specify the name of the decal to use for the logo and the glow panel here.
    DECAL
    {
      shortName = Basic MBU
      logoPanel = MBUDecal
      glowPanel = MBUDecalGlow
    }

    DECAL
    {
      shortName = Pioneer
      logoPanel = Decal42
      glowPanel = Decal42Glow
    }

    DECAL
    {
      shortName = Rocket Parts
      logoPanel = Decal45
      glowPanel = Decal45Glow
    }

    DECAL
    {
      shortName = Life Support
      logoPanel = Decal51
      glowPanel = Decal51Glow
    }

    DECAL
    {
      shortName = Mining
      logoPanel = Decal52
      glowPanel = Decal52Glow
    }

    DECAL
    {
      shortName = Refining
      logoPanel = Decal54
      glowPanel = Decal54Glow
    }

    DECAL
    {
      shortName = Equipment
      logoPanel = Decal55
      glowPanel = Decal55Glow
    }

    DECAL
    {
      shortName = Fabrication
      logoPanel = Decal56
      glowPanel = Decal56Glow
    }

    DECAL
    {
      shortName = Refueling
      logoPanel = Decal57
      glowPanel = Decal57Glow
    }
}

MODULE
{
    name = KASModuleGrab            
    evaPartPos = (0.0, 0.40, 0.00)        
    evaPartDir = (0,0,-1)
    storable = true
    storedSize  = 20
    attachOnPart = true
    attachOnEva = true
}

}
