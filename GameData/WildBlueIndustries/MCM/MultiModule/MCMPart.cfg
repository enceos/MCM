PART
{
// this is a sample config file, for determining a good file format for defining part parameters
// comment line - ignored by cfg parser
// empty lines, or lines without a '=' sign are also ignored
// all other lines are split at the '=' sign, and the left operand is used to know what parameter we are setting
// diferent parameters require data in different formats (see docs), and each module has it's own parameters (again, see docs)
// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)
// each keyword here relates to an existing variable in the assigned module. If the keyword isn't found, it is ignored.
// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it's default value
// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it's value can be parsed)


// --- general parameters ---
name = WBI_MCM
module = Part
author = Michael Billard (Angel-125)

// --- asset parameters ---
rescaleFactor = 1

MODEL
{
	model = WildBlueIndustries/MCM/MultiModule/MCM
}


// --- node definitions ---
// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
node_stack_top = 0.0, 1.41, 0.0, 0.0, 1.0, 0.0, 2
node_stack_bottom = 0.0, -1.41, 0.0, 0.0, 1.0, 0.0, 2

// --- editor parameters ---
TechRequired = specializedConstruction
entryCost = 8000
cost = 35000
category = Utility
subcategory = 0
title = Multipurpose Colony Module
manufacturer = Wild Blue Industries
description = Designed to work with the Modular Kolonization System by Umbra Space Industries, the Multipurpose Colony Module enables builders to outfit the module for a variety of different purposes before launching and/or while out in the field. It is also conveniently shaped to fit within 2.5-meter standard payload shrouds.

// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,0,1,1,0

// --- standard part parameters ---
mass = 1.25
dragModelType = default
maximum_drag = 0.25
minimum_drag = 0.25
angularDrag = .5
crashTolerance = 45
breakingForce = 280
breakingTorque = 280
maxTemp = 3400
CrewCapacity = 2

INTERNAL
{
    name = landerCabinInternals
}

MODULE
{
    name = MKSModuleController
    enableLogging = True

    //Determines whether or not to show the context menu GUI
    //So objects derived from MKSStorageContainer can show their own GUI
    showGUI = True

    //name of the template nodes to use
    templateNodes = MKSTEMPLATE

    //Short name of the default module template.
    //This is used when selecting the part in the editor.
    //User will then right-click on the module to change its type.
    defaultTemplate = Basic Module

    //Names of the MKS resources
    //Kludge, but I need to know what resources to zero out when switching module types.
    //Why? Because modules like TAC will add resources and we don't want to zero out those.
    //Ideally the KolonyConverter itself would know what the total possible resources that it can use are, and zero them out.
    resourcesToReplace = BioMass;EnrichedUranium;DepletedUranium;PunchCards;Machinery;StructuralParts;MechanicalParts;ElectronicParts;Recyclables;ExoticMinerals;RareMetals;Chemicals;Polymers;Compost

    //Ignore these modules when loading modules from a template
    ignoreTemplateModules = KolonyConverter;MKSModule;MKSModuleSwitcher;MKSStorageContainer;OrbitalLogistics;ProxyLogistics;ExWorkshop

    //Name of animation for floodlights (MCM specific)
    floodlightsAnim = Floodlights

    //Name of mesh with no floodlights (MCM specific)
    noFloodlightsMesh = BodyClean2

    //Path to the decals used when displaying the module info panel.
    infoDecalsPath = WildBlueIndustries/MCM/Decals

    //Base path where all the decals are located
    decalBasePath = WildBlueIndustries/MCM/Decals

    //Name of the logo panel transforms
    logoPanelTransform = logoPanel001, logoPanel002, logoPanel003, logoPanel004, logoPanel005

    //The DECAL config node is used to determine the names of the logo panels and glow panels.
    //MKSModuleController uses the short name, which is also used in the template file, to determine what decals to use where.
    //Since different models and parts can use different decals, we specify the name of the decal to use for the logo and the glow panel here.
    DECAL
    {
      shortName = Basic Module
      logoPanel = BasicDecal
      glowPanel = BasicDecalGlow
      infoDecal = BasicDecal
    }

    DECAL
    {
      shortName = Colony Hub
      logoPanel = Decal00
      glowPanel = Decal00Glow
      infoDecal = Decal00
    }

    DECAL
    {
      shortName = PDU
      logoPanel = Decal02
      glowPanel = Decal02Glow
      infoDecal = Decal02
    }

    DECAL
    {
      shortName = Machinery Plant
      logoPanel = Decal03
      glowPanel = Decal03Glow
      infoDecal = Decal03
    }

    DECAL
    {
      shortName = Repair Shop
      logoPanel = Decal04
      glowPanel = Decal04Glow
      infoDecal = Decal04
    }

    DECAL
    {
      shortName = BioLab
      logoPanel = Decal06
      glowPanel = Decal06Glow
      infoDecal = Decal06
    }

    DECAL
    {
      shortName = Aeroponics
      logoPanel = Decal07
      glowPanel = Decal07Glow
      infoDecal = Decal07
    }

    DECAL
    {
      shortName = Kerbitat(tm)
      logoPanel = Decal08
      glowPanel = Decal08Glow
      infoDecal = Decal08
    }

    DECAL
    {
      shortName = Mobile Refinery
      logoPanel = Decal09
      glowPanel = Decal09Glow
      infoDecal = Decal09
    }

    DECAL
    {
      shortName = Fabricator
      logoPanel = Decal10
      glowPanel = Decal10Glow
      infoDecal = Decal10
    }

    DECAL
    {
      shortName = Science Lab
      logoPanel = Decal13
      glowPanel = Decal13Glow
      infoDecal = Decal13
    }

    DECAL
    {
      shortName = Workspace Module
      logoPanel = Decal99
      glowPanel = Decal99Glow
      infoDecal = Decal99
    }
}

MODULE
{
    name = FSmeshSwitch
    moduleID = 0
    buttonName = Next Variant
    showPreviousButton = false
    objectDisplayNames = Peripherals;No Peripherals; Clean
    objects = MachineryBody; BodyClean; BodyClean2
    updateSymetry = true
}

MODULE
{
    name = FSanimateGeneric
    animationName = Floodlights
    startEventGUIName = Floodlights On
    endEventGUIName = Floodlights Off
    toggleActionName = Toggle Floodlights
    availableInEVA = True
    availableInVessel = True
    EVArange = 5
    layer = 8
    moduleID=1
    playAnimationOnEditorSpawn = False
}

MODULE
{
	name = ModuleLight
        lightName = DoorLight
	useAnimationDim = true           	//use BrightenSpeed and DimSpeed settings.
	lightBrightenSpeed = 2.5  
	lightDimSpeed = 2.5
	resourceAmount = 0.04          		//amount of EC consumed per second
	animationName = ModuleLights		//Emissive animation
	useResources = true               	// set to false of you don't want light to consume EC
}

MODULE
{
	name = ModuleCommand
	minimumCrew = 0
	
	RESOURCE
	{
		name = ElectricCharge
		rate = 0.05
	}
}

MODULE
{
    name = MKSModule
    workSpace = 1
    livingSpace = 0
}

MODULE
{
    name = ExWorkshop
    ProductivityFactor  = 1
}

MODULE
{
    name = FlagDecal
    textureQuadName = flagTransform
}

MODULE
{
    name = ModuleConnectedLivingSpace
    passable = true
}

MODULE
{
    name = ModuleRCS
    thrusterTransformName = rcsThruster
    thrusterPower = 1
    resourceName = MonoPropellant
    resourceFlowMode = STAGE_PRIORITY_FLOW
    atmosphereCurve
    {
       key = 0 260
       key = 1 100
    }
}

}
