PART
{
// this is a sample config file, for determining a good file format for defining part parameters
// comment line - ignored by cfg parser
// empty lines, or lines without a '=' sign are also ignored
// all other lines are split at the '=' sign, and the left operand is used to know what parameter we are setting
// diferent parameters require data in different formats (see docs), and each module has it's own parameters (again, see docs)
// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)
// each keyword here relates to an existing variable in the assigned module. If the keyword isn't found, it is ignored.
// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it's default value
// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it's value can be parsed)


// --- general parameters ---
name = WBI_Homestead
module = Part
author = Michael Billard (Angel-125)

// --- asset parameters ---
rescaleFactor = 1

MODEL
{
    model = WildBlueIndustries/MCM/Assets/Homestead
}


// --- node definitions ---
// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
node_stack_top = 0.0, 2.7, 0.0, 0.0, 1.0, 0.0, 2
node_stack_bottom = 0.0, -2.7, 0.0, 0.0, 1.0, 0.0, 2

// --- editor parameters ---
TechRequired = composites
entryCost = 12000
cost = 50000
category = Utility
subcategory = 0
title = Homestead
manufacturer = Wild Blue Industries
description = A large heavy duty Inflatable Multipurpose Module (IMM), the Homestead can be configured for a variety of different needs ranging from Kolonization modules to storage. It is large enough to not require extension modules.

// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,0,1,1,0

// --- standard part parameters ---
mass = 2.5
dragModelType = default
maximum_drag = 0.25
minimum_drag = 0.25
angularDrag = .5
crashTolerance = 45
breakingForce = 280
breakingTorque = 280
maxTemp = 1500
CrewCapacity = 4

INTERNAL
{
    name = landerCabinInternals
}

MODULE
{
    name = MKSModuleController
    enableLogging = True

    //Determines whether or not the part is inflatable
    isInflatable = True

    //Name of inflatable animation
    animationName = Deploy

    //GUI name of deploy animation
    startEventGUIName = Inflate

    //GUI name of retract animation
    endEventGUIName = Deflate

    //Determines if the module allows in-field reconfiguring
    fieldReconfigurable = True

    //Determines whether or not to show the context menu GUI
    showGUI = True

    //If the part has a KAS container, this is the base amount
    baseKasAmount = 240

    //Short name of the default module template.
    //This is used when selecting the part in the editor.
    //User will then right-click on the module to change its type.
    defaultTemplate = Basic Module

    //name of the template nodes to use
    templateNodes = MKSTEMPLATE

    //The type of template(s) that the module accepts.
    //Don't include this if the part accepts all templates of type templateNodes.
    templateTypes = Kolony;Storage

    //List of all the resources that may be replaced during a template switch. Any resource NOT
    //on the list will be preserved.
    //If empty, then all of the part's resources will be cleared during a template switch.
    //Set to ALL if you want all of the part's resources to be cleared during a template switch.
    //This exists because mods like TAC-LS like to add resources to parts and we won't know about them at runtime.
    resourcesToReplace = ALL

    //Some containers don't hold as much resources as the template specifies, while others hold more.
    //Since the resource templates specify base amounts, the capacity factor specifies a multiplier to
    //factor into the resource amounts.
    capacityFactor = 4.5

    //Capacity factor applies to the following types of templates.
    capacityFactorTypes = Storage

    //Short name of the default module template.
    //This is used when selecting the part in the editor.
    //User will then right-click on the module to change its type.
    defaultTemplate = Basic Module

    //Ignore these modules when loading modules from a template
    ignoreTemplateModules = KolonyConverter;MKSModule;MKSModuleSwitcher;MKSStorageContainer;OrbitalLogistics;ProxyLogistics;ExWorkshop

    //Path to the decals used when displaying the module info panel.
    infoDecalsPath = WildBlueIndustries/MCM/Decals

    //Base path where all the decals are located
    decalBasePath = WildBlueIndustries/MCM/Decals

    //Name of the logo panel transforms
    logoPanelTransform = logoPanel001, logoPanel002, logoPanel003

    //The OVERRIDE config node is used to determine the names of the logo panels and glow panels and provide overrides to various template parameters.
    //MKSModuleController uses the short name, which is also used in the template file, to determine what decals to use where.
    //Since different models and parts can use different decals, we specify the name of the decal to use for the logo and the glow panel here.
    OVERRIDE
    {
      shortName = Basic Module
      logoPanel = BasicDecal
      glowPanel = BasicDecalGlow
      infoDecal = BasicDecal
    }

    OVERRIDE
    {
      shortName = Colony Hub
      logoPanel = Decal00
      glowPanel = Decal00Glow
      infoDecal = Decal00
    }

    OVERRIDE
    {
      shortName = PDU
      logoPanel = Decal02
      glowPanel = Decal02Glow
      infoDecal = Decal02
    }

    OVERRIDE
    {
      shortName = Machinery Plant
      logoPanel = Decal03
      glowPanel = Decal03Glow
      infoDecal = Decal03
      efficiencyPart = none
    }

    OVERRIDE
    {
      shortName = Repair Shop
      logoPanel = Decal04
      glowPanel = Decal04Glow
      infoDecal = Decal04
      efficiencyPart = none
    }

    OVERRIDE
    {
      shortName = BioLab
      logoPanel = Decal06
      glowPanel = Decal06Glow
      infoDecal = Decal06
    }

    OVERRIDE
    {
      shortName = Aeroponics
      logoPanel = Decal07
      glowPanel = Decal07Glow
      infoDecal = Decal07
      efficiencyPart = none
    }

    OVERRIDE
    {
      shortName = Kerbitat(tm)
      logoPanel = Decal08
      glowPanel = Decal08Glow
      infoDecal = Decal08
      efficiencyPart = none
    }

    OVERRIDE
    {
      shortName = Mobile Refinery
      logoPanel = Decal09
      glowPanel = Decal09Glow
      infoDecal = Decal09
      efficiencyPart = none
    }

    OVERRIDE
    {
      shortName = Fabricator
      logoPanel = Decal10
      glowPanel = Decal10Glow
      infoDecal = Decal10
      efficiencyPart = none
    }

    OVERRIDE
    {
      shortName = Science Lab
      logoPanel = Decal13
      glowPanel = Decal13Glow
      infoDecal = Decal13
    }

    OVERRIDE
    {
      shortName = Fuel Refinery
      logoPanel = Decal14
      glowPanel = Decal14Glow
      infoDecal = Decal14
      efficiencyPart = none
    }

    OVERRIDE
    {
      shortName = Workspace Module
      logoPanel = Decal99
      glowPanel = Decal99Glow
      infoDecal = Decal99
    }

    OVERRIDE
    {
      shortName = Pioneer
      logoPanel = Decal42
      glowPanel = Decal42Glow
      infoDecal = Decal42
    }

    OVERRIDE
    {
      shortName = Rocket Parts
      logoPanel = Decal45
      glowPanel = Decal45Glow
      infoDecal = Decal45
    }

    OVERRIDE
    {
      shortName = Storage
      logoPanel = Decal46
      glowPanel = Decal46Glow
      infoDecal = Decal46
    }

    OVERRIDE
    {
      shortName = Ore
      logoPanel = Decal47
      glowPanel = Decal47Glow
      infoDecal = Decal47
    }

    OVERRIDE
    {
      shortName = Metal
      logoPanel = Decal48
      glowPanel = Decal48Glow
      infoDecal = Decal48
    }

    OVERRIDE
    {
      shortName = Fusion
      logoPanel = Decal49
      glowPanel = Decal49Glow
      infoDecal = Decal49
    }

    OVERRIDE
    {
      shortName = Life Support
      logoPanel = Decal51
      glowPanel = Decal51Glow
      infoDecal = Decal51
    }

    OVERRIDE
    {
      shortName = Mining
      logoPanel = Decal52
      glowPanel = Decal52Glow
      infoDecal = Decal52
    }

    OVERRIDE
    {
      shortName = Refining
      logoPanel = Decal54
      glowPanel = Decal54Glow
      infoDecal = Decal54
    }

    OVERRIDE
    {
      shortName = Equipment
      logoPanel = Decal55
      glowPanel = Decal55Glow
      infoDecal = Decal55
    }

    OVERRIDE
    {
      shortName = Fabrication
      logoPanel = Decal56
      glowPanel = Decal56Glow
      infoDecal = Decal56
    }

    OVERRIDE
    {
      shortName = Refueling
      logoPanel = Decal57
      glowPanel = Decal57Glow
      infoDecal = Decal57
    }
}

MODULE
{
    name = KASModuleContainer
    maxOpenDistance = 4
    maxSize = 240
    sndStorePath = KAS/Sounds/hookBayStore
    sndOpenPath = KAS/Sounds/containerOpen
    sndClosePath = KAS/Sounds/containerClose
    bipWrongSndPath = KAS/Sounds/bipwrong
}

MODULE
{
    name = FSanimateGeneric
    animationName = HomesteadLights
    startEventGUIName = Lights On
    endEventGUIName = Lights Off
    toggleActionName = Toggle Lights
    availableInEVA = True
    availableInVessel = True
    EVArange = 5
    layer = 8
    moduleID=1
    playAnimationOnEditorSpawn = False
}

MODULE
{
    name = MKSEfficiencyModule
    workSpace = 1
    livingSpace = 0
}

MODULE
{
    name = ExWorkshop
    ProductivityFactor = 4
}

MODULE
{
    name = FlagDecal
    textureQuadName = flagTransform
}

MODULE
{
    name = ModuleConnectedLivingSpace
    passable = true
}

MODULE
{
    name = ModuleRCS
    thrusterTransformName = rcsThruster
    thrusterPower = 1
    resourceName = MonoPropellant
    resourceFlowMode = STAGE_PRIORITY_FLOW
    atmosphereCurve
    {
       key = 0 260
       key = 1 100
    }
}

}
